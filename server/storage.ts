import { 
  users, type User, type InsertUser,
  products, type Product, type InsertProduct,
  cartItems, type CartItem, type InsertCartItem,
  orders, type Order, type InsertOrder,
  orderItems, type OrderItem, type InsertOrderItem,
  reviews, type Review, type InsertReview
} from "@shared/schema";

export interface IStorage {
  // User operations
  getUser(id: number): Promise<User | undefined>;
  getUserByUsername(username: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
  
  // Product operations
  getAllProducts(): Promise<Product[]>;
  getProduct(id: number): Promise<Product | undefined>;
  getProductsByCategory(category: string): Promise<Product[]>;
  
  // Cart operations
  getCartItemsByUser(userId: number): Promise<(CartItem & { product: Product })[]>;
  addToCart(userId: number, productId: number, quantity: number): Promise<CartItem>;
  updateCartItemQuantity(id: number, quantity: number): Promise<CartItem>;
  removeFromCart(id: number): Promise<void>;
  
  // Order operations
  createOrder(order: InsertOrder, items: InsertOrderItem[]): Promise<Order>;
  getOrdersByUser(userId: number): Promise<Order[]>;
  getOrderById(id: number): Promise<(Order & { items: (OrderItem & { product: Product })[] }) | undefined>;
  
  // Review operations
  getAllReviews(): Promise<(Review & { user: Pick<User, 'id' | 'username' | 'name'>, product: Pick<Product, 'id' | 'name' | 'nameKorean'> })[]>;
  getReviewsByProduct(productId: number): Promise<(Review & { user: Pick<User, 'id' | 'username' | 'name'> })[]>;
  createReview(review: InsertReview): Promise<Review>;
}

export class MemStorage implements IStorage {
  private users: Map<number, User>;
  private products: Map<number, Product>;
  private cartItems: Map<number, CartItem>;
  private orders: Map<number, Order>;
  private orderItems: Map<number, OrderItem>;
  private reviews: Map<number, Review>;
  
  private userIdCounter: number;
  private productIdCounter: number;
  private cartItemIdCounter: number;
  private orderIdCounter: number;
  private orderItemIdCounter: number;
  private reviewIdCounter: number;
  
  constructor() {
    this.users = new Map();
    this.products = new Map();
    this.cartItems = new Map();
    this.orders = new Map();
    this.orderItems = new Map();
    this.reviews = new Map();
    
    this.userIdCounter = 1;
    this.productIdCounter = 1;
    this.cartItemIdCounter = 1;
    this.orderIdCounter = 1;
    this.orderItemIdCounter = 1;
    this.reviewIdCounter = 1;
    
    // Initialize with sample products
    this.initializeProducts();
  }
  
  // User operations
  async getUser(id: number): Promise<User | undefined> {
    return this.users.get(id);
  }
  
  async getUserByUsername(username: string): Promise<User | undefined> {
    return Array.from(this.users.values()).find(user => user.username === username);
  }
  
  async createUser(insertUser: InsertUser): Promise<User> {
    const id = this.userIdCounter++;
    const user: User = { 
      ...insertUser, 
      id, 
      role: "user", 
      createdAt: new Date() 
    };
    this.users.set(id, user);
    return user;
  }
  
  // Product operations
  async getAllProducts(): Promise<Product[]> {
    return Array.from(this.products.values());
  }
  
  async getProduct(id: number): Promise<Product | undefined> {
    return this.products.get(id);
  }
  
  async getProductsByCategory(category: string): Promise<Product[]> {
    return Array.from(this.products.values()).filter(product => product.category === category);
  }

  async insertProduct(productData: Omit<Product, 'id'>): Promise<Product> {
    const id = this.productIdCounter++;
    const product: Product = {
      ...productData,
      id,
      // tagsÍ∞Ä Î¨∏ÏûêÏó¥Î°ú Ïò§Î©¥ Î∞∞Ïó¥Î°ú Î≥ÄÌôò
      tags: typeof productData.tags === 'string'
        ? productData.tags.split(',').filter(tag => tag.trim())
        : productData.tags || [],
      // Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
      isBestseller: productData.isBestseller || false,
      isNew: productData.isNew || false,
      isPopular: productData.isPopular || false
    };

    this.products.set(id, product);
    console.log('üíæ ÏÉÅÌíà Ï†ÄÏû• ÏôÑÎ£å:', product);
    return product;
  }

  async getProductById(id: number): Promise<Product | null> {
    return this.products.get(id) || null;
  }

  async updateProduct(id: number, productData: Partial<Omit<Product, 'id'>>): Promise<boolean> {
    const existingProduct = this.products.get(id);
    if (!existingProduct) {
      console.log('‚ùå ÏÉÅÌíàÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå:', id);
      return false;
    }

    const updatedProduct: Product = {
      ...existingProduct,
      ...productData,
      id, // IDÎäî Î≥ÄÍ≤ΩÎêòÏßÄ ÏïäÏùå
      // tagsÍ∞Ä Î¨∏ÏûêÏó¥Î°ú Ïò§Î©¥ Î∞∞Ïó¥Î°ú Î≥ÄÌôò
      tags: Array.isArray(productData.tags)
        ? productData.tags
        : (typeof productData.tags === 'string'
          ? productData.tags.split(',').map(tag => tag.trim())
          : existingProduct.tags)
    };

    this.products.set(id, updatedProduct);
    console.log('üíæ ÏÉÅÌíà ÏàòÏ†ï ÏôÑÎ£å:', updatedProduct);
    return true;
  }

  // Cart operations
  async getCartItemsByUser(userId: number): Promise<(CartItem & { product: Product })[]> {
    const items = Array.from(this.cartItems.values())
      .filter(item => item.userId === userId);
    
    return items.map(item => {
      const product = this.products.get(item.productId);
      if (!product) {
        throw new Error(`Product not found for cart item: ${item.id}`);
      }
      return { ...item, product };
    });
  }
  
  async addToCart(userId: number, productId: number, quantity: number): Promise<CartItem> {
    // Check if product exists
    const product = this.products.get(productId);
    if (!product) {
      throw new Error(`Product not found: ${productId}`);
    }
    
    // Check if already in cart
    const existingItem = Array.from(this.cartItems.values()).find(
      item => item.userId === userId && item.productId === productId
    );
    
    if (existingItem) {
      return this.updateCartItemQuantity(existingItem.id, existingItem.quantity + quantity);
    }
    
    // Add new cart item
    const id = this.cartItemIdCounter++;
    const cartItem: CartItem = { id, userId, productId, quantity };
    this.cartItems.set(id, cartItem);
    return cartItem;
  }
  
  async updateCartItemQuantity(id: number, quantity: number): Promise<CartItem> {
    const cartItem = this.cartItems.get(id);
    if (!cartItem) {
      throw new Error(`Cart item not found: ${id}`);
    }
    
    const updatedItem = { ...cartItem, quantity };
    this.cartItems.set(id, updatedItem);
    return updatedItem;
  }
  
  async removeFromCart(id: number): Promise<void> {
    this.cartItems.delete(id);
  }
  
  // Order operations
  async createOrder(orderData: InsertOrder, itemsData: InsertOrderItem[]): Promise<Order> {
    const id = this.orderIdCounter++;
    const order: Order = {
      ...orderData,
      id,
      createdAt: new Date()
    };
    
    this.orders.set(id, order);
    
    // Create order items
    for (const itemData of itemsData) {
      const orderItemId = this.orderItemIdCounter++;
      const orderItem: OrderItem = {
        ...itemData,
        id: orderItemId,
        orderId: id
      };
      this.orderItems.set(orderItemId, orderItem);
    }
    
    return order;
  }
  
  async getOrdersByUser(userId: number): Promise<Order[]> {
    return Array.from(this.orders.values())
      .filter(order => order.userId === userId)
      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());
  }
  
  async getOrderById(id: number): Promise<(Order & { items: (OrderItem & { product: Product })[] }) | undefined> {
    const order = this.orders.get(id);
    if (!order) return undefined;
    
    const items = Array.from(this.orderItems.values())
      .filter(item => item.orderId === id)
      .map(item => {
        const product = this.products.get(item.productId);
        if (!product) {
          throw new Error(`Product not found for order item: ${item.id}`);
        }
        return { ...item, product };
      });
    
    return { ...order, items };
  }
  
  // Review operations
  async getAllReviews(): Promise<(Review & { user: Pick<User, 'id' | 'username' | 'name'>, product: Pick<Product, 'id' | 'name' | 'nameKorean'> })[]> {
    return Array.from(this.reviews.values()).map(review => {
      const user = this.users.get(review.userId);
      const product = this.products.get(review.productId);
      
      if (!user || !product) {
        throw new Error(`User or product not found for review: ${review.id}`);
      }
      
      return {
        ...review,
        user: {
          id: user.id,
          username: user.username,
          name: user.name
        },
        product: {
          id: product.id,
          name: product.name,
          nameKorean: product.nameKorean
        }
      };
    });
  }
  
  async getReviewsByProduct(productId: number): Promise<(Review & { user: Pick<User, 'id' | 'username' | 'name'> })[]> {
    return Array.from(this.reviews.values())
      .filter(review => review.productId === productId)
      .map(review => {
        const user = this.users.get(review.userId);
        
        if (!user) {
          throw new Error(`User not found for review: ${review.id}`);
        }
        
        return {
          ...review,
          user: {
            id: user.id,
            username: user.username,
            name: user.name
          }
        };
      });
  }
  
  async createReview(reviewData: InsertReview): Promise<Review> {
    const id = this.reviewIdCounter++;
    const review: Review = {
      ...reviewData,
      id,
      createdAt: new Date()
    };
    
    this.reviews.set(id, review);
    return review;
  }
  
  // Initialize with sample products
  private initializeProducts() {
    const sampleProducts: Omit<Product, 'id'>[] = [
      {
        name: 'Classic Croissant',
        nameKorean: 'ÌÅ¥ÎûòÏãù ÌÅ¨Î°úÏôÄÏÉÅ',
        description: '72ÏãúÍ∞Ñ Ï†ÄÏò® Î∞úÌö®Î°ú ÏôÑÏÑ±Ìïú Î∞îÏÇ≠Ìïú Í≤âÎ©¥Í≥º Î∂ÄÎìúÎü¨Ïö¥ ÏÜç',
        price: 4800,
        image: 'https://images.unsplash.com/photo-1608198093002-ad4e005484ec?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2232&q=80',
        category: 'regular',
        tags: ['Î∞îÏÇ≠Ìï®', 'ÌÅ¨Î°úÏôÄÏÉÅ', 'ÏïÑÏπ®ÏãùÏÇ¨'],
        isBestseller: true,
        isNew: false,
        isPopular: false
      },
      {
        name: 'French Baguette',
        nameKorean: 'ÌîÑÎ†åÏπò Î∞îÍ≤åÌä∏',
        description: 'Íµ≠ÎÇ¥ÏÇ∞ Î∞ÄÍ≥º Ï≤úÏó∞ Î∞úÌö®Ï¢ÖÏúºÎ°ú ÌîÑÎûëÏä§ Ï†ïÌÜµ Î∞©Ïãù Ïû¨ÌòÑ',
        price: 5200,
        image: 'https://images.unsplash.com/photo-1586444248902-2f64eddc13df?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80',
        category: 'regular',
        tags: ['Î∞îÍ≤åÌä∏', 'ÌîÑÎûëÏä§Îπµ', 'Ï†ÄÎÖÅÏãùÏÇ¨'],
        isBestseller: false,
        isNew: false,
        isPopular: true
      },
      {
        name: 'Whole Wheat Bread',
        nameKorean: 'ÌÜµÎ∞Ä ÏãùÎπµ',
        description: 'Ïú†Í∏∞ÎÜç ÌÜµÎ∞ÄÍ≥º ÍøÄÎ°ú ÎßåÎì† Í±¥Í∞ïÌïú ÏãùÎπµ',
        price: 6800,
        image: 'https://images.unsplash.com/photo-1517433670267-08bbd4be890f?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=796&q=80',
        category: 'regular',
        tags: ['ÌÜµÎ∞Ä', 'Í±¥Í∞ïÎπµ', 'ÏÉåÎìúÏúÑÏπò'],
        isBestseller: false,
        isNew: false,
        isPopular: false
      },
      {
        name: 'Special Chocolate Cake',
        nameKorean: 'Ïä§ÌéòÏÖú Ï¥àÏΩúÎ¶ø ÏºÄÏù¥ÌÅ¨',
        description: 'Î≤®Í∏∞Ïóê Ï¥àÏΩúÎ¶øÏùÑ ÏÇ¨Ïö©Ìïú ÌäπÎ≥ÑÌïú Ï¥àÏΩúÎ¶ø ÏºÄÏù¥ÌÅ¨',
        price: 38000,
        image: 'https://images.unsplash.com/photo-1578985545062-69928b1d9587?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1089&q=80',
        category: 'custom',
        tags: ['ÏºÄÏù¥ÌÅ¨', 'Ï¥àÏΩúÎ¶ø', 'ÏÉùÏùº'],
        isBestseller: false,
        isNew: false,
        isPopular: false
      },
      {
        name: 'Fresh Fruit Tart',
        nameKorean: 'Ïã†ÏÑ†Ìïú Í≥ºÏùº ÌÉÄÎ•¥Ìä∏',
        description: 'Ï†úÏ≤† Í≥ºÏùºÎ°ú Ïû•ÏãùÌïú, Î∞îÎãêÎùº Ïª§Ïä§ÌÑ∞ÎìúÍ∞Ä Í∞ÄÎìùÌïú ÌÉÄÎ•¥Ìä∏',
        price: 32000,
        image: 'https://images.unsplash.com/photo-1565958011703-44f9829ba187?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=765&q=80',
        category: 'custom',
        tags: ['ÌÉÄÎ•¥Ìä∏', 'Í≥ºÏùº', 'ÎîîÏ†ÄÌä∏'],
        isBestseller: false,
        isNew: true,
        isPopular: false
      },
      {
        name: 'Anniversary Gift Set',
        nameKorean: 'Í∏∞ÎÖêÏùº ÏÑ†Î¨º ÏÑ∏Ìä∏',
        description: 'ÌäπÎ≥ÑÌïú ÎÇ†ÏùÑ ÏúÑÌïú ÏºÄÏù¥ÌÅ¨ÏôÄ ÍΩÉ, Î©îÏãúÏßÄ Ïπ¥ÎìúÍ∞Ä Ìè¨Ìï®Îêú ÏÑ†Î¨º ÏÑ∏Ìä∏',
        price: 55000,
        image: 'https://images.unsplash.com/photo-1627834377411-8da5f4f09de8?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1901&q=80',
        category: 'gift',
        tags: ['ÏÑ†Î¨º', 'ÏºÄÏù¥ÌÅ¨', 'ÍΩÉ', 'Í∏∞ÎÖêÏùº'],
        isBestseller: false,
        isNew: false,
        isPopular: false
      }
    ];
    
    sampleProducts.forEach(product => {
      const id = this.productIdCounter++;
      this.products.set(id, {
        ...product,
        id
      });
    });
  }
}

export const storage = new MemStorage();
